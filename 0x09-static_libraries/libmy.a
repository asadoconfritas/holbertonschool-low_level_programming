!<arch>
0-isupper.o/    0           0     0     644     151       `
#include main.h

/**
 * _isupper - prints w return
 * @c: int
 * Return: end program
 **/

int _isupper(int c)
{
	return ((c >= 'A') && (c <= 'Z'));
}

0-memset.o/     0           0     0     644     248       `
#include "main.h"

/**
 * _memset - print w return
 * @s: char
 * @b: char
 * @n: unsigned int
 * Return: end program
 **/

char *_memset(char *s, char b, unsigned int n)

{
	unsigned int i;

	for (i = 0; i < n; i++)
		*(s + i) = b;
	return (s);
}
0-strcat.o/     0           0     0     644     302       `
#include "main.h"

/**
 * *_strcat - prints w return
 * @dest: char
 * @src: char
 * Return: end program
 **/

char *_strcat(char *dest, char *src)
{
	int i, y;

	i = 0;
	y = 0;

	while (dest[i] != 0)
		i++;

	while (src[y] != 0)
	{
		dest[i] = src[y];
		i++;
		y++;
	}
	dest[i] = 0;
	return (dest);
}
100-atoi.o/     0           0     0     644     571       `
#include "main.h"

/**
 * _atoi - function
 * @s : a
 *
 *Return: output
 **/
int _atoi(char *s)
{
	double number;
	int sign, c, after, _after, out;

	sign = 1;
	number = 0;
	after = 1;
	_after = 1;
	for (c = 0; s[c]; c++)
	{
		if (_after)
		{
			if ((s[c] >= '0') && (s[c] <= '9'))
			{
				after = 0;
				number *= 10;
				number += (s[c] - '0');
			}
		}
		if (after && (s[c] == '-'))
			sign *= -1;
		if ((((s[c] >= 'A') && (s[c] <= 'Z')) ||
		     ((s[c] >= 'a') && (s[c] <= 'z'))) && (after == 0))
			_after = 0;
	}
	number *= sign;
	out = number;
	return (out);
}

1-isdigit.o/    0           0     0     644     153       `
#include "main.h"

/**
 * _isdigit - prints w return
 * @c: int
 * Return: end program
 **/

int _isdigit(int c)
{
	return ((c >= '0') && (c <= '9'));
}

1-memcpy.o/     0           0     0     644     274       `
#include "main.h"

/**
 * _memcpy - print w return
 * @dest: char
 * @src: char
 * @n: unsigned int
 * Return: end program
 **/

char *_memcpy(char *dest, char *src, unsigned int n)

{
	unsigned int i;

	for (i = 0; i < n; i++)
		*(dest + i) = *(src + i);
	return (dest);
}
1-strncat.o/    0           0     0     644     338       `
#include "main.h"

/**
 * *_strncat - print w return
 * @dest: char
 * @src: char
 * @n: int
 * Return: 0
 **/

char *_strncat(char *dest, char *src, int n)

{
	int i, a;

	for (i = 0; dest[i] != 0; i++)
		continue;
	for (a = 0; (src[i] != 0) && (a < n); a++)
		dest[i + a] = src[a];
	if (a < n)
		dest[i + a] = src[a];
	return (dest);
}
2-strchr.o/     0           0     0     644     269       `
#include "main.h"

/**
 * _strchr - prints w return
 * @s: char
 * @c: char
 * Return: end program
 **/

char *_strchr(char *s, char c)

{
	int i;

	i = 0;
	while (*(s + i) != 0 && *(s + i) != c)
	{
		i++;
	}
	if (*(s + i) == c)
		return (s + i);
	else
		return (0);
}

2-strlen.o/     0           0     0     644     176       `
#include "main.h"

/**
 * _strlen - print w return
 * @s: int
 * Return: end program
 **/

int _strlen(char *s)
{
	int i;

	i = 0;
	while (*(s + i) != 0)
		i++;
	return (i);
}
2-strncpy.o/    0           0     0     644     291       `
#include "main.h"

/**
 * _strncpy - print w return
 * @dest: char
 * @src: char
 * @n: int
 * Return: end program
 **/

char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; i < n && src[i] != 0; i++)
		dest[i] = src[i];
	for ( ; i < n; i++)
		dest[i] = 0;
	return (dest);
}

3-islower.o/    0           0     0     644     198       `
#include <stdio.h>
#include "main.h"

/**
 *_islower - checks for lowercase character
 *@c: char to return
 * Return: end product
 **/

int _islower(int c)
{
	return (((c >= 'a') && (c <= 'z')));
}
3-puts.o/       0           0     0     644     214       `
#include "main.h"

/**
 * _puts - print w putchar
 * @str: char
 * Return: end program
 **/
void _puts(char *str)
{
	int i;

	i = 0;
	while (*(str + i) != 0)
	{
		_putchar(*(str + i));
		i++;
	}
	_putchar('\n');
}
3-strcmp.o/     0           0     0     644     309       `
#include "main.h"

/**
 * _strcmp - print w return
 * @s1: char
 * @s2: char
 * Return: end product
 **/

int _strcmp(char *s1, char *s2)
{
	int i, dif;

	dif = 0;
	for (i = 0; (s1[i] != 0) && (s2[i] != 0) && s1[i] == s2[i]; i++)
		continue;
	if (s1[i] != s2[i])
	{
		dif = s1[i] - s2[i];
	}
	return (dif);
}

3-strspn.o/     0           0     0     644     340       `
#include "main.h"

/**
 * _strspn - prints w return
 * @s: char
 * @accept: char
 * Return: end program
 **/

unsigned int _strspn(char *s, char *accept)

{
	int i, j, nb;

	nb = 0;

	for (i = 0; *(s + i) != 32; i++)
	{
		for (j = 0; *(accept + j) != 0; j++)
		{
			if (*(s + i) == *(accept + j))
			{
				nb++;
			}
		}
	}
	return (nb);
}
4-isalpha.o/    0           0     0     644     233       `
#include <stdio.h>
#include "main.h"

/**
 * _isalpha - checks for alphabetic character
 * @c: int to return
 * Return: end product
 **/

int _isalpha(int c)

{
	return ((((c >= 'A') && (c <= 'Z')) || ((c >= 'a') && (c <= 'z'))));
}

4-strpbrk.o/    0           0     0     644     368       `
#include "main.h"

/**
 * _strpbrk - print w return
 * @s: char
 * @accept: char
 * Return: end program
 **/

char *_strpbrk(char *s, char *accept)

{
	int i, j;
	char *poi;

	i = 0;

	while (*(s + i) != 0)
	{
		j = 0;
		while (*(accept + j) != 0)
		{
			if (*(accept + j) == *(s + i))
			{
				poi = &s[i];
				return (poi);
			}
			j++;
		}
		i++;
	}
	return (0);
}
5-strstr.o/     0           0     0     644     226       `
#include "main.h"

/**
 * _strstr - work in progress
 * @haystack: char
 * @needle: char
 * Return: end program
 **/

char *_strstr(char *haystack, char *needle)

{
	if (*needle == 0)
	{
		return (haystack);
	}
	return (0);
}
6-abs.o/        0           0     0     644     153       `
#include "main.h"

/**
 * _abs - prints a message
 * @c: char to print
 * Return: end program
 **/

int _abs(int c)
{
	return (c - (c * 2 * (c < 0)));
}

9-strcpy.o/     0           0     0     644     259       `
#include "main.h"

/**
 * *_strcpy - print w return
 * @dest: char
 * @src: char
 **/

char *_strcpy(char *dest, char *src)
{
	int i;

	i = 0;
	while (*(src + i) != 0)
	{
		*(src + i) = *(dest + i);
		i++;
	}
	if (*(dest + i) == *(src + i))
	return (dest);
}

_putchar.o/     0           0     0     644     249       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 **/
int _putchar(char c)
{
		return (write(1, &c, 1));
}

